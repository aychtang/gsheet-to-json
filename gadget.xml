<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="Spreadsheet to JSON"
description="This gadget will convert spreadsheet data to JSON. The first row must dictate the type of entry in the cell (string, dict, list), and the second row are the column headers."
author="Nick Pappas feat. Pamela Fox"
author_affiliation=""
author_email="code@radicand.org"
screenshot="http://pamela.fox.googlepages.com/screenshot_spreadsheetsconverter.jpg"
thumbnail="http://pamela.fox.googlepages.com/thumbnail_spreadsheetconverter.jpg" >
<Require feature="idi"/>
<Require feature="locked-domain" />
</ModulePrefs>
<UserPref name="_table_query_url" display_name="Data source url"
required="true"/>
<UserPref name="_table_query_refresh_interval"
display_name="Data refresh interval (minutes)"
default_value="0" datatype="enum" required="false">
<EnumValue value="0" display_value="Do not refresh"/>
<EnumValue value="60" display_value="1"/>
<EnumValue value="300" display_value="5"/>
<EnumValue value="1800" display_value="30"/>
</UserPref>
<UserPref name="output_type" display_name="Output Type"
default_value="json" datatype="enum" required="false">
<EnumValue value="json" display_value="JSON"/>
</UserPref>
<Content type="html"><![CDATA[
<link href="http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.css" type="text/css" rel="stylesheet" />
<script src="http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.js"></script>
<script src="http://www.google.com/jsapi" type="text/javascript"></script>

<pre class="prettyprint" id="tablediv" style="overflow: auto; height:95%">
<img src="http://www.google.com/ig/images/spinner.gif" />
</pre>
<script>

/**
* Load the APIs and run sendQuery when the load is complete
*/
var gadgetHelper = null;
var prefs = null;

_IG_RegisterOnloadHandler(loadVisualizationAPI);
function loadVisualizationAPI() {
  google.load("visualization", "1");
  google.setOnLoadCallback(sendQuery);
}

/**
* Create a query (shaped by the Gadget's user preferences), then
* send it to the spreadsheet data source. Also give the name of a
* function ("handleQueryResponse") to run once the spreadsheet data
* is retrieved:
*/
function sendQuery() {
  prefs = new _IG_Prefs(); // User preferences
  gadgetHelper = new google.visualization.GadgetHelper();
  var query = gadgetHelper.createQueryFromPrefs(prefs);
  query.send(handleQueryResponse);
}

/**
* The core logic. Process the spreadsheet data however you want.
* In this case, we create HTML to be presented back to the user.
* We'll use inline comments to provide a step-by-step description
* of what we're doing:
*/
function handleQueryResponse(response) {

  /**
  * Use the visualization GadgetHelper class to handle errors
  */
  if (!gadgetHelper.validateResponse(response)) {
    return; // Default error handling was done, just leave.
  }
  var data = response.getDataTable();
  var outputType = prefs.getString("output_type");
  var output = "";
  if (outputType == "json") {
    output = convertToJSON(data);
  }

  /**
  * Set the generated html into the container div.
  */
  var tableDiv = _gel('tablediv');
  tableDiv.innerHTML = output;
  tableDiv.style.width = document.body.clientWidth + 'px';
  tableDiv.style.height = document.body.clientHeight + 'px';
  prettyPrint();
}

function convertToJSON(data) {
  var numRows = data.getNumberOfRows();
  var numCols = data.getNumberOfColumns();
  var finalObj = [];
  for (var row = 0; row < numRows; row++) {
    var rowObj = {};
    for (var col = 2; col < data.getNumberOfColumns(); col++) {
      var cellType = data.getValue(0, col);
      var columnLabel = data.getValue(1, col).toLocaleLowerCase();

      var value = data.getValue(row, col);
      
      if (cellType == 'dict' || cellType == 'list') {
       try {
         value = JSON.parse(value);
       } catch (e) {
         try {
           value = JSON.parse(value.replace(/^{([^":]+)/, "{\"\$1\"}"));
         } catch (e) {}
       }
      }
      rowObj[columnLabel] = value;
    }
    finalObj.push(rowObj);
  }
  return JSON.stringify({rows: finalObj});
}

/**
* Define any supporting code you need
* (like this handy function to escape special characters for html output):
*/
function escapeHtml(text) {
  if (text == null) {
   return '';
  }
  return _hesc(text);
}

</script>
]]>
</Content>
</Module>
